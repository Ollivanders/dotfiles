ZSH_DISABLE_COMPFIX=true
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# your project folder that we can `c [tab]` to
# [[ -d ${HOME}/Documents/Projects ]] || mkdir -p ${HOME}/Documents/Projects 
# export PROJECTS_DIR=${HOME}/Documents/Projects

# 256 color mode
export TERM="xterm-256color"

# Global variables 
export ZSH=$HOME/.oh-my-zsh
export DOTFILES=$HOME/.dotfiles
export ZSHPATH=${DOTFILES}/zsh
# export =${HOME}/.oh-my-zsh

# Stash your local environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]; then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/**/*.zsh)

# Remove custom files that handle their own .zsh stuffs, 
# leaving just the goodies in the their .dotfiles directory
config_files=(${${${config_files:#*/powerlevel10k*}:#*/custom*}:#*/ohmyzsh*})
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files # TODO: no longer need to ignore these 
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# Better history
# Credits to https://coderwall.com/p/jpj_6q/zsh-better-history-searching-with-arrow-keys
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[A" up-line-or-beginning-search # Up
bindkey "^[[B" down-line-or-beginning-search # Down

unset config_files
# # initialize autocomplete here, otherwise functions won't be loaded
# autoload -U compinit
# compinit

###############################################################################
# unset config_files
# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $DOTFILES/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )


# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"


# Would you like to use another custom folder than $ZSH/custom?
ZSH_CUSTOM=${ZSHPATH}/custom

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse
# Add wisely, as too many plugins slow down shell startup.
if [[ "$OSTYPE" =~ "darwin"* ]]; then # macOS
plugins=(
  git 
  zsh-syntax-highlighting 
  # vi-mode
  auto-ls
  zsh-autosuggestions
  history-substring-search
  extract
  alias-finder
  osx
  )
else
plugins=(
  git 
  zsh-syntax-highlighting 
  # vi-mode
  auto-ls
  zsh-autosuggestions
  history-substring-search
  extract
  alias-finder
  )
fi

ZSH_THEME="powerlevel10k/powerlevel10k"
source $ZSH/oh-my-zsh.sh
# source ${ZSHPATH}/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

### Fix slowness of pastes with zsh-syntax-highlighting.zsh
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}
pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish
### Fix slowness of pastes